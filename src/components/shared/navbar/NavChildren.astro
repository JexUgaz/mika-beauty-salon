---
import ArrowDownIcon from "@/components/icons/ArrowDownIcon.astro";
import type { NavbarItem } from "@/types/NavbarItem";

interface Props {
  children: NavbarItem[];
  currentPath: string;
}

const { children, currentPath } = Astro.props;
---

<ul
  class="absolute left-0 top-full mt-2 bg-white shadow-xl rounded-lg py-2 w-full
      px-2 divide-y divide-gray-200
      opacity-0 invisible translate-y-3 pointer-events-none
      group-hover:opacity-100 group-hover:visible group-hover:translate-y-0 group-hover:pointer-events-auto
      group-[.open]:opacity-100 group-[.open]:visible group-[.open]:translate-y-0 group-[.open]:pointer-events-auto
      transition-all duration-300 ease-[cubic-bezier(0.4,0,0.2,1)] z-50"
>
  {
    children.map((child) => {
      const isActive = currentPath === child.href;

      const linkBaseClasses =
        "font-title flex items-center gap-2 px-4 py-2 text-lg transition-all duration-200 hover:bg-gray-100 hover:rounded-md";
      const linkActiveClasses = "text-mika-primary font-semibold";
      const linkInactiveClasses = "text-gray-800 hover:text-mika-primary";

      const iconBaseClasses =
        "size-3 transform transition-transform duration-200 rotate-270";
      const iconActiveClasses = "translate-x-1 text-mika-primary";
      const iconInactiveClasses = "group-hover:translate-x-1";

      return (
        <li>
          <a
            href={child.href}
            class={`${linkBaseClasses} ${isActive ? linkActiveClasses : linkInactiveClasses}`}
          >
            <ArrowDownIcon
              class={`${iconBaseClasses} ${isActive ? iconActiveClasses : iconInactiveClasses}`}
            />
            {child.name}
          </a>
        </li>
      );
    })
  }
</ul>
